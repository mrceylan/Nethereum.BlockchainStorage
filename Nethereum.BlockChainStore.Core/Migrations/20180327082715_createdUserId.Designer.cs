// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using OpsICO.Core.Data;
using OpsICO.Core.Enums;
using System;

namespace OpsICO.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180327082715_createdUserId")]
    partial class createdUserId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Campaign", b =>
                {
                    b.Property<int>("CampaignID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AirdropAmount");

                    b.Property<int>("ApprovalStatus");

                    b.Property<int>("CampaignStatus");

                    b.Property<string>("CardImage");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("CreatedUserId");

                    b.Property<int>("Currency");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndTime");

                    b.Property<double>("HardCap");

                    b.Property<double>("MaxAmount");

                    b.Property<double>("MinAmount");

                    b.Property<string>("Name");

                    b.Property<double>("RaisedAmount");

                    b.Property<int>("RecordState");

                    b.Property<string>("ShortDescription");

                    b.Property<double>("SoftCap");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("TokenName");

                    b.Property<int>("Type");

                    b.HasKey("CampaignID");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.CampaignDetail", b =>
                {
                    b.Property<int>("CampaignDetailID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CampaignID");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("CreatedUserId");

                    b.Property<string>("Link");

                    b.Property<int>("LinkType");

                    b.Property<int>("RecordState");

                    b.Property<string>("Title");

                    b.HasKey("CampaignDetailID");

                    b.HasIndex("CampaignID");

                    b.ToTable("CampaignDetail");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.CampaignUpdate", b =>
                {
                    b.Property<int>("CampaignUpdateID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CampaignID");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("CreatedUserId");

                    b.Property<int>("RecordState");

                    b.Property<string>("UpdateDetail");

                    b.HasKey("CampaignUpdateID");

                    b.HasIndex("CampaignID");

                    b.ToTable("CampaignUpdate");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CampaignID");

                    b.Property<int>("CommentState");

                    b.Property<string>("CommentText");

                    b.Property<DateTime>("CommentTime");

                    b.Property<string>("UserID");

                    b.HasKey("CommentID");

                    b.HasIndex("CampaignID");

                    b.HasIndex("UserID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Follow", b =>
                {
                    b.Property<int>("FollowID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CampaignID");

                    b.Property<DateTime>("FollowTime");

                    b.Property<string>("UserID");

                    b.Property<bool>("isActive");

                    b.HasKey("FollowID");

                    b.HasIndex("CampaignID");

                    b.HasIndex("UserID");

                    b.ToTable("Follow");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Investment", b =>
                {
                    b.Property<int>("InvestmentID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int>("CampaignID");

                    b.Property<int>("Currency");

                    b.Property<string>("TxID");

                    b.Property<string>("UserID");

                    b.Property<int>("WalletID");

                    b.HasKey("InvestmentID");

                    b.HasIndex("CampaignID");

                    b.HasIndex("UserID");

                    b.HasIndex("WalletID");

                    b.ToTable("Investment");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CampaignID");

                    b.Property<bool>("IsRead");

                    b.Property<string>("MessageText");

                    b.Property<DateTime>("MessageTime");

                    b.Property<string>("UserID");

                    b.HasKey("MessageID");

                    b.HasIndex("CampaignID");

                    b.HasIndex("UserID");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("NotificationSettingID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Finance");

                    b.Property<bool>("FollowedCampaigns");

                    b.Property<bool>("InviteLinks");

                    b.Property<bool>("Messages");

                    b.Property<bool>("NewCampaigns");

                    b.Property<bool>("News");

                    b.Property<string>("UserID");

                    b.HasKey("NotificationSettingID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("NotificationSetting");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Pricing", b =>
                {
                    b.Property<int>("PricingID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CampaignID");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("CreatedUserId");

                    b.Property<DateTime>("EndTime");

                    b.Property<double>("MaxAmount");

                    b.Property<double>("MinAmount");

                    b.Property<double>("PricePerCurrency");

                    b.Property<int>("RecordState");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("PricingID");

                    b.HasIndex("CampaignID");

                    b.ToTable("Pricing");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CampaignID");

                    b.Property<int>("RatingValue");

                    b.Property<string>("UserID");

                    b.HasKey("RatingID");

                    b.HasIndex("CampaignID");

                    b.HasIndex("UserID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Reference", b =>
                {
                    b.Property<int>("ReferenceID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("CampaignID");

                    b.Property<string>("Link");

                    b.Property<string>("UserID");

                    b.HasKey("ReferenceID");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.ReferenceDetail", b =>
                {
                    b.Property<int>("ReferenceDetailID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedTime");

                    b.Property<int?>("ReferenceID");

                    b.Property<int>("ReferenceStatus");

                    b.Property<int>("TargetUserID");

                    b.HasKey("ReferenceDetailID");

                    b.HasIndex("ReferenceID");

                    b.ToTable("ReferenceDetail");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.UserDetail", b =>
                {
                    b.Property<int>("UserDetailID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Avatar");

                    b.Property<string>("Biography");

                    b.Property<string>("Country");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<string>("Nationality");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Surname");

                    b.Property<string>("UserID");

                    b.Property<bool>("Verified");

                    b.HasKey("UserDetailID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("UserDetail");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.UserWallet", b =>
                {
                    b.Property<int>("UserWalletID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("UserID");

                    b.Property<bool>("Verified");

                    b.HasKey("UserWalletID");

                    b.HasIndex("UserID");

                    b.ToTable("UserWallet");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Verification", b =>
                {
                    b.Property<int>("VerificationID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApprovalStatus");

                    b.Property<int>("DocumentType");

                    b.Property<string>("FilePath");

                    b.Property<string>("UserID");

                    b.HasKey("VerificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Verification");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.WhitelistMember", b =>
                {
                    b.Property<int>("WhitelistMemberID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CampaignID");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("CreatedUserId");

                    b.Property<double>("MaxAmount");

                    b.Property<double>("MinAmount");

                    b.Property<int>("RecordState");

                    b.Property<string>("UserID");

                    b.Property<int>("WhitelistStatus");

                    b.HasKey("WhitelistMemberID");

                    b.HasIndex("CampaignID");

                    b.HasIndex("UserID");

                    b.ToTable("WhiteListMember");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpsICO.Core.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Campaign", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.ApplicationUser", "CreatedUser")
                        .WithMany("Campaigns")
                        .HasForeignKey("CreatedUserId");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.CampaignDetail", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.Campaign", "Campaign")
                        .WithMany("CampaignDetails")
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpsICO.Core.Entities.CampaignUpdate", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.Campaign")
                        .WithMany("Updates")
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Comment", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.Campaign", "Campaign")
                        .WithMany("Comments")
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpsICO.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Follow", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.Campaign", "Campaign")
                        .WithMany("Followers")
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpsICO.Core.Entities.ApplicationUser", "User")
                        .WithMany("FollowedCampaigns")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Investment", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.Campaign", "Campaign")
                        .WithMany("Investors")
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpsICO.Core.Entities.ApplicationUser", "User")
                        .WithMany("Investments")
                        .HasForeignKey("UserID");

                    b.HasOne("OpsICO.Core.Entities.UserWallet", "Wallet")
                        .WithMany("Investment")
                        .HasForeignKey("WalletID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Message", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.Campaign", "Campaign")
                        .WithMany("Messages")
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpsICO.Core.Entities.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.NotificationSetting", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.ApplicationUser", "User")
                        .WithOne("NotificationSetting")
                        .HasForeignKey("OpsICO.Core.Entities.NotificationSetting", "UserID");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Pricing", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.Campaign")
                        .WithMany("PricingDetails")
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Rating", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.Campaign", "Campaign")
                        .WithMany("Ratings")
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpsICO.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Reference", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.ApplicationUser")
                        .WithMany("References")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.ReferenceDetail", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.Reference", "Reference")
                        .WithMany("ReferenceDetails")
                        .HasForeignKey("ReferenceID");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.UserDetail", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.ApplicationUser", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("OpsICO.Core.Entities.UserDetail", "UserID");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.UserWallet", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.ApplicationUser", "User")
                        .WithMany("UserWallets")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.Verification", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.ApplicationUser", "User")
                        .WithMany("Verifications")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OpsICO.Core.Entities.WhitelistMember", b =>
                {
                    b.HasOne("OpsICO.Core.Entities.Campaign", "Campaign")
                        .WithMany("WhitelistMembers")
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpsICO.Core.Entities.ApplicationUser", "User")
                        .WithMany("JoinedWhiteLists")
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
